// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RendaFixa.Infrastruct.Context;

#nullable disable

namespace RendaFixa.Infrastruct.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241007022626_BancoDados")]
    partial class BancoDados
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RendaFixa.Domain.Entities.Aporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContaId")
                        .HasColumnType("int")
                        .HasColumnName("conta_fk");

                    b.Property<DateTime>("DataOperacao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_operacao");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer")
                        .HasColumnName("quantidade");

                    b.Property<int>("RendaFixaId")
                        .HasColumnType("int")
                        .HasColumnName("renda_fixa_fk");

                    b.HasKey("Id");

                    b.HasIndex("ContaId");

                    b.HasIndex("RendaFixaId");

                    b.ToTable("aporte", (string)null);
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPF = "12345678901",
                            DataNascimento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "João Silva"
                        });
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Conta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_fk");

                    b.Property<int>("Codigo")
                        .HasColumnType("int")
                        .HasColumnName("codigo");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal")
                        .HasColumnName("saldo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("conta", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            Codigo = 1001,
                            Saldo = 5000.00m
                        });
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.ProdutoRendaFixa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estoque")
                        .HasColumnType("int")
                        .HasColumnName("estoque");

                    b.Property<string>("Indexador")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("indexador");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal")
                        .HasColumnName("preco_unitario");

                    b.Property<decimal>("Taxa")
                        .HasColumnType("decimal")
                        .HasColumnName("taxa");

                    b.HasKey("Id");

                    b.ToTable("produto_renda_fixa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estoque = 100,
                            Indexador = "Selic",
                            Nome = "Tesouro Direto",
                            PrecoUnitario = 100.0000m,
                            Taxa = 5.0000m
                        },
                        new
                        {
                            Id = 2,
                            Estoque = 50,
                            Indexador = "CDI",
                            Nome = "CDBs",
                            PrecoUnitario = 55.0000m,
                            Taxa = 3.0000m
                        },
                        new
                        {
                            Id = 3,
                            Estoque = 200,
                            Indexador = "IPCA",
                            Nome = "Debêntures",
                            PrecoUnitario = 25.0000m,
                            Taxa = 4.0000m
                        },
                        new
                        {
                            Id = 4,
                            Estoque = 150,
                            Indexador = "IGPM",
                            Nome = "Fundos de Renda Fixa",
                            PrecoUnitario = 30.0000m,
                            Taxa = 6.0000m
                        },
                        new
                        {
                            Id = 5,
                            Estoque = 75,
                            Indexador = "IPCA",
                            Nome = "LCIs",
                            PrecoUnitario = 70.0000m,
                            Taxa = 5.0000m
                        },
                        new
                        {
                            Id = 6,
                            Estoque = 60,
                            Indexador = "CDI",
                            Nome = "LCAs",
                            PrecoUnitario = 45.0000m,
                            Taxa = 3.0000m
                        },
                        new
                        {
                            Id = 7,
                            Estoque = 30,
                            Indexador = "IGPM",
                            Nome = "CRIs",
                            PrecoUnitario = 60.0000m,
                            Taxa = 4.0000m
                        },
                        new
                        {
                            Id = 8,
                            Estoque = 40,
                            Indexador = "Selic",
                            Nome = "CRAs",
                            PrecoUnitario = 80.0000m,
                            Taxa = 6.0000m
                        },
                        new
                        {
                            Id = 9,
                            Estoque = 20,
                            Indexador = "CDI",
                            Nome = "Carteiras digitais remuneradas",
                            PrecoUnitario = 50.0000m,
                            Taxa = 3.0000m
                        },
                        new
                        {
                            Id = 10,
                            Estoque = 10,
                            Indexador = "IPCA",
                            Nome = "Letra de Câmbio (LC)",
                            PrecoUnitario = 90.0000m,
                            Taxa = 5.0000m
                        });
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Aporte", b =>
                {
                    b.HasOne("RendaFixa.Domain.Entities.Conta", "Conta")
                        .WithMany("Aportes")
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RendaFixa.Domain.Entities.ProdutoRendaFixa", "RendaFixa")
                        .WithMany("Aportes")
                        .HasForeignKey("RendaFixaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conta");

                    b.Navigation("RendaFixa");
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Conta", b =>
                {
                    b.HasOne("RendaFixa.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Contas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Contas");
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.Conta", b =>
                {
                    b.Navigation("Aportes");
                });

            modelBuilder.Entity("RendaFixa.Domain.Entities.ProdutoRendaFixa", b =>
                {
                    b.Navigation("Aportes");
                });
#pragma warning restore 612, 618
        }
    }
}
